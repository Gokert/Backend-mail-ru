// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package requests

import (
	json "encoding/json"
	models "github.com/go-park-mail-ru/2023_2_Vkladyshi/pkg/models"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests(in *jlexer.Lexer, out *UsersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]models.UserItem, 0, 0)
					} else {
						out.Users = []models.UserItem{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v1 models.UserItem
					(v1).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests(out *jwriter.Writer, in UsersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Users {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests1(in *jlexer.Lexer, out *SubcribeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "subscribe":
			out.IsSubcribed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests1(out *jwriter.Writer, in SubcribeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"subscribe\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsSubcribed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubcribeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubcribeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubcribeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubcribeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests1(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests2(in *jlexer.Lexer, out *SignupRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "birth_date":
			out.BirthDate = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests2(out *jwriter.Writer, in SignupRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"birth_date\":"
		out.RawString(prefix)
		out.String(string(in.BirthDate))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignupRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignupRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignupRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignupRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests2(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests3(in *jlexer.Lexer, out *SigninRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests3(out *jwriter.Writer, in SigninRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SigninRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SigninRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SigninRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SigninRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests3(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests4(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			if m, ok := out.Body.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Body.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Body = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests4(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if m, ok := in.Body.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Body.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Body))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests4(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests5(in *jlexer.Lexer, out *ProfileResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "photo":
			out.Photo = string(in.String())
		case "birthday":
			out.BirthDate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests5(out *jwriter.Writer, in ProfileResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(in.BirthDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests5(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests6(in *jlexer.Lexer, out *FindFilmRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "date_from":
			out.DateFrom = string(in.String())
		case "date_to":
			out.DateTo = string(in.String())
		case "rating_from":
			out.RatingFrom = float32(in.Float32())
		case "rating_to":
			out.RatingTo = float32(in.Float32())
		case "mpaa":
			out.Mpaa = string(in.String())
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]uint32, 0, 16)
					} else {
						out.Genres = []uint32{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v4 uint32
					v4 = uint32(in.Uint32())
					out.Genres = append(out.Genres, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "actors":
			if in.IsNull() {
				in.Skip()
				out.Actors = nil
			} else {
				in.Delim('[')
				if out.Actors == nil {
					if !in.IsDelim(']') {
						out.Actors = make([]string, 0, 4)
					} else {
						out.Actors = []string{}
					}
				} else {
					out.Actors = (out.Actors)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Actors = append(out.Actors, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "page":
			out.Page = uint64(in.Uint64())
		case "per_page":
			out.PerPage = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests6(out *jwriter.Writer, in FindFilmRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"date_from\":"
		out.RawString(prefix)
		out.String(string(in.DateFrom))
	}
	{
		const prefix string = ",\"date_to\":"
		out.RawString(prefix)
		out.String(string(in.DateTo))
	}
	{
		const prefix string = ",\"rating_from\":"
		out.RawString(prefix)
		out.Float32(float32(in.RatingFrom))
	}
	{
		const prefix string = ",\"rating_to\":"
		out.RawString(prefix)
		out.Float32(float32(in.RatingTo))
	}
	{
		const prefix string = ",\"mpaa\":"
		out.RawString(prefix)
		out.String(string(in.Mpaa))
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Genres {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"actors\":"
		out.RawString(prefix)
		if in.Actors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Actors {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Page))
	}
	{
		const prefix string = ",\"per_page\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.PerPage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FindFilmRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FindFilmRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FindFilmRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FindFilmRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests6(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests7(in *jlexer.Lexer, out *FindActorRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "birthday":
			out.BirthDate = string(in.String())
		case "amplua":
			if in.IsNull() {
				in.Skip()
				out.Career = nil
			} else {
				in.Delim('[')
				if out.Career == nil {
					if !in.IsDelim(']') {
						out.Career = make([]string, 0, 4)
					} else {
						out.Career = []string{}
					}
				} else {
					out.Career = (out.Career)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Career = append(out.Career, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "films":
			if in.IsNull() {
				in.Skip()
				out.Films = nil
			} else {
				in.Delim('[')
				if out.Films == nil {
					if !in.IsDelim(']') {
						out.Films = make([]string, 0, 4)
					} else {
						out.Films = []string{}
					}
				} else {
					out.Films = (out.Films)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Films = append(out.Films, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "country":
			out.Country = string(in.String())
		case "page":
			out.Page = uint64(in.Uint64())
		case "per_page":
			out.PerPage = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests7(out *jwriter.Writer, in FindActorRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(in.BirthDate))
	}
	{
		const prefix string = ",\"amplua\":"
		out.RawString(prefix)
		if in.Career == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Career {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"films\":"
		out.RawString(prefix)
		if in.Films == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Films {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Page))
	}
	{
		const prefix string = ",\"per_page\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.PerPage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FindActorRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FindActorRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FindActorRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FindActorRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests7(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests8(in *jlexer.Lexer, out *FilmsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "current_page":
			out.Page = uint64(in.Uint64())
		case "page_size":
			out.PageSize = uint64(in.Uint64())
		case "collection_name":
			out.CollectionName = string(in.String())
		case "total":
			out.Total = uint64(in.Uint64())
		case "films":
			if in.IsNull() {
				in.Skip()
				out.Films = nil
			} else {
				in.Delim('[')
				if out.Films == nil {
					if !in.IsDelim(']') {
						out.Films = make([]models.FilmItem, 0, 0)
					} else {
						out.Films = []models.FilmItem{}
					}
				} else {
					out.Films = (out.Films)[:0]
				}
				for !in.IsDelim(']') {
					var v16 models.FilmItem
					(v16).UnmarshalEasyJSON(in)
					out.Films = append(out.Films, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests8(out *jwriter.Writer, in FilmsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"current_page\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Page))
	}
	{
		const prefix string = ",\"page_size\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.PageSize))
	}
	{
		const prefix string = ",\"collection_name\":"
		out.RawString(prefix)
		out.String(string(in.CollectionName))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Total))
	}
	{
		const prefix string = ",\"films\":"
		out.RawString(prefix)
		if in.Films == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Films {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests8(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests9(in *jlexer.Lexer, out *FilmResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "film":
			(out.Film).UnmarshalEasyJSON(in)
		case "genre":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]models.GenreItem, 0, 2)
					} else {
						out.Genres = []models.GenreItem{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v19 models.GenreItem
					(v19).UnmarshalEasyJSON(in)
					out.Genres = append(out.Genres, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rating":
			out.Rating = float64(in.Float64())
		case "number":
			out.Number = uint64(in.Uint64())
		case "directors":
			if in.IsNull() {
				in.Skip()
				out.Directors = nil
			} else {
				in.Delim('[')
				if out.Directors == nil {
					if !in.IsDelim(']') {
						out.Directors = make([]models.CrewItem, 0, 0)
					} else {
						out.Directors = []models.CrewItem{}
					}
				} else {
					out.Directors = (out.Directors)[:0]
				}
				for !in.IsDelim(']') {
					var v20 models.CrewItem
					(v20).UnmarshalEasyJSON(in)
					out.Directors = append(out.Directors, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "scenarists":
			if in.IsNull() {
				in.Skip()
				out.Scenarists = nil
			} else {
				in.Delim('[')
				if out.Scenarists == nil {
					if !in.IsDelim(']') {
						out.Scenarists = make([]models.CrewItem, 0, 0)
					} else {
						out.Scenarists = []models.CrewItem{}
					}
				} else {
					out.Scenarists = (out.Scenarists)[:0]
				}
				for !in.IsDelim(']') {
					var v21 models.CrewItem
					(v21).UnmarshalEasyJSON(in)
					out.Scenarists = append(out.Scenarists, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "actors":
			if in.IsNull() {
				in.Skip()
				out.Characters = nil
			} else {
				in.Delim('[')
				if out.Characters == nil {
					if !in.IsDelim(']') {
						out.Characters = make([]models.Character, 0, 1)
					} else {
						out.Characters = []models.Character{}
					}
				} else {
					out.Characters = (out.Characters)[:0]
				}
				for !in.IsDelim(']') {
					var v22 models.Character
					(v22).UnmarshalEasyJSON(in)
					out.Characters = append(out.Characters, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests9(out *jwriter.Writer, in FilmResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"film\":"
		out.RawString(prefix[1:])
		(in.Film).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"genre\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Genres {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Number))
	}
	{
		const prefix string = ",\"directors\":"
		out.RawString(prefix)
		if in.Directors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Directors {
				if v25 > 0 {
					out.RawByte(',')
				}
				(v26).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"scenarists\":"
		out.RawString(prefix)
		if in.Scenarists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Scenarists {
				if v27 > 0 {
					out.RawByte(',')
				}
				(v28).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"actors\":"
		out.RawString(prefix)
		if in.Characters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Characters {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests9(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests10(in *jlexer.Lexer, out *EditProfileRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				out.Photo = in.Bytes()
			}
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests10(out *jwriter.Writer, in EditProfileRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Photo)
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditProfileRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditProfileRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditProfileRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditProfileRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests10(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests11(in *jlexer.Lexer, out *DeleteCommentRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.IdUser = uint64(in.Uint64())
		case "film_id":
			out.IdFilm = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests11(out *jwriter.Writer, in DeleteCommentRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.IdUser))
	}
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.IdFilm))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteCommentRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteCommentRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteCommentRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteCommentRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests11(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests12(in *jlexer.Lexer, out *CommentResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "comment":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				in.Delim('[')
				if out.Comments == nil {
					if !in.IsDelim(']') {
						out.Comments = make([]models.CommentItem, 0, 0)
					} else {
						out.Comments = []models.CommentItem{}
					}
				} else {
					out.Comments = (out.Comments)[:0]
				}
				for !in.IsDelim(']') {
					var v34 models.CommentItem
					(v34).UnmarshalEasyJSON(in)
					out.Comments = append(out.Comments, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests12(out *jwriter.Writer, in CommentResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix[1:])
		if in.Comments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Comments {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests12(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests13(in *jlexer.Lexer, out *CommentRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "film_id":
			out.FilmId = uint64(in.Uint64())
		case "rating":
			out.Rating = uint16(in.Uint16())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests13(out *jwriter.Writer, in CommentRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.FilmId))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Rating))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests13(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests14(in *jlexer.Lexer, out *ChangeRoleRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "role":
			out.Role = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests14(out *jwriter.Writer, in ChangeRoleRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeRoleRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeRoleRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeRoleRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeRoleRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests14(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests15(in *jlexer.Lexer, out *CalendarResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "monthName":
			out.MonthName = string(in.String())
		case "monthText":
			out.MonthText = string(in.String())
		case "currentDay":
			out.CurrentDay = uint8(in.Uint8())
		case "days":
			if in.IsNull() {
				in.Skip()
				out.Days = nil
			} else {
				in.Delim('[')
				if out.Days == nil {
					if !in.IsDelim(']') {
						out.Days = make([]models.DayItem, 0, 1)
					} else {
						out.Days = []models.DayItem{}
					}
				} else {
					out.Days = (out.Days)[:0]
				}
				for !in.IsDelim(']') {
					var v37 models.DayItem
					(v37).UnmarshalEasyJSON(in)
					out.Days = append(out.Days, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests15(out *jwriter.Writer, in CalendarResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"monthName\":"
		out.RawString(prefix[1:])
		out.String(string(in.MonthName))
	}
	{
		const prefix string = ",\"monthText\":"
		out.RawString(prefix)
		out.String(string(in.MonthText))
	}
	{
		const prefix string = ",\"currentDay\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.CurrentDay))
	}
	{
		const prefix string = ",\"days\":"
		out.RawString(prefix)
		if in.Days == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Days {
				if v38 > 0 {
					out.RawByte(',')
				}
				(v39).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CalendarResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CalendarResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CalendarResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CalendarResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests15(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests16(in *jlexer.Lexer, out *AuthCheckResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "role":
			out.Role = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests16(out *jwriter.Writer, in AuthCheckResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthCheckResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthCheckResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthCheckResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthCheckResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests16(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests17(in *jlexer.Lexer, out *ActorsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "actors":
			if in.IsNull() {
				in.Skip()
				out.Actors = nil
			} else {
				in.Delim('[')
				if out.Actors == nil {
					if !in.IsDelim(']') {
						out.Actors = make([]models.Character, 0, 1)
					} else {
						out.Actors = []models.Character{}
					}
				} else {
					out.Actors = (out.Actors)[:0]
				}
				for !in.IsDelim(']') {
					var v40 models.Character
					(v40).UnmarshalEasyJSON(in)
					out.Actors = append(out.Actors, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total":
			out.Total = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests17(out *jwriter.Writer, in ActorsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"actors\":"
		out.RawString(prefix[1:])
		if in.Actors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Actors {
				if v41 > 0 {
					out.RawByte(',')
				}
				(v42).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActorsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActorsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActorsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActorsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests17(l, v)
}
func easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests18(in *jlexer.Lexer, out *ActorResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "poster_href":
			out.Photo = string(in.String())
		case "career":
			if in.IsNull() {
				in.Skip()
				out.Career = nil
			} else {
				in.Delim('[')
				if out.Career == nil {
					if !in.IsDelim(']') {
						out.Career = make([]models.ProfessionItem, 0, 2)
					} else {
						out.Career = []models.ProfessionItem{}
					}
				} else {
					out.Career = (out.Career)[:0]
				}
				for !in.IsDelim(']') {
					var v43 models.ProfessionItem
					(v43).UnmarshalEasyJSON(in)
					out.Career = append(out.Career, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "birthday":
			out.BirthDate = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "info_text":
			out.Info = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests18(out *jwriter.Writer, in ActorResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"poster_href\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"career\":"
		out.RawString(prefix)
		if in.Career == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Career {
				if v44 > 0 {
					out.RawByte(',')
				}
				(v45).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(in.BirthDate))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"info_text\":"
		out.RawString(prefix)
		out.String(string(in.Info))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActorResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActorResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComGoParkMailRu20232VkladyshiPkgRequests18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActorResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActorResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComGoParkMailRu20232VkladyshiPkgRequests18(l, v)
}
