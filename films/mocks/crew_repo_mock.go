// Code generated by MockGen. DO NOT EDIT.
// Source: repo_crew.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_2_Vkladyshi/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockICrewRepo is a mock of ICrewRepo interface.
type MockICrewRepo struct {
	ctrl     *gomock.Controller
	recorder *MockICrewRepoMockRecorder
}

// MockICrewRepoMockRecorder is the mock recorder for MockICrewRepo.
type MockICrewRepoMockRecorder struct {
	mock *MockICrewRepo
}

// NewMockICrewRepo creates a new mock instance.
func NewMockICrewRepo(ctrl *gomock.Controller) *MockICrewRepo {
	mock := &MockICrewRepo{ctrl: ctrl}
	mock.recorder = &MockICrewRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICrewRepo) EXPECT() *MockICrewRepoMockRecorder {
	return m.recorder
}

// AddFavoriteActor mocks base method.
func (m *MockICrewRepo) AddFavoriteActor(userId, actorId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFavoriteActor", userId, actorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFavoriteActor indicates an expected call of AddFavoriteActor.
func (mr *MockICrewRepoMockRecorder) AddFavoriteActor(userId, actorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavoriteActor", reflect.TypeOf((*MockICrewRepo)(nil).AddFavoriteActor), userId, actorId)
}

// AddFilm mocks base method.
func (m *MockICrewRepo) AddFilm(actors []uint64, filmId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilm", actors, filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFilm indicates an expected call of AddFilm.
func (mr *MockICrewRepoMockRecorder) AddFilm(actors, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilm", reflect.TypeOf((*MockICrewRepo)(nil).AddFilm), actors, filmId)
}

// CheckActor mocks base method.
func (m *MockICrewRepo) CheckActor(userId, actorId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckActor", userId, actorId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckActor indicates an expected call of CheckActor.
func (mr *MockICrewRepoMockRecorder) CheckActor(userId, actorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckActor", reflect.TypeOf((*MockICrewRepo)(nil).CheckActor), userId, actorId)
}

// FindActor mocks base method.
func (m *MockICrewRepo) FindActor(name, birthDate string, films, career []string, country string, first, limit uint64) ([]models.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActor", name, birthDate, films, career, country, first, limit)
	ret0, _ := ret[0].([]models.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActor indicates an expected call of FindActor.
func (mr *MockICrewRepoMockRecorder) FindActor(name, birthDate, films, career, country, first, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActor", reflect.TypeOf((*MockICrewRepo)(nil).FindActor), name, birthDate, films, career, country, first, limit)
}

// GetActor mocks base method.
func (m *MockICrewRepo) GetActor(actorId uint64) (*models.CrewItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", actorId)
	ret0, _ := ret[0].(*models.CrewItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockICrewRepoMockRecorder) GetActor(actorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockICrewRepo)(nil).GetActor), actorId)
}

// GetFavoriteActors mocks base method.
func (m *MockICrewRepo) GetFavoriteActors(userId, start, end uint64) ([]models.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteActors", userId, start, end)
	ret0, _ := ret[0].([]models.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteActors indicates an expected call of GetFavoriteActors.
func (mr *MockICrewRepoMockRecorder) GetFavoriteActors(userId, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteActors", reflect.TypeOf((*MockICrewRepo)(nil).GetFavoriteActors), userId, start, end)
}

// GetFilmCharacters mocks base method.
func (m *MockICrewRepo) GetFilmCharacters(filmId uint64) ([]models.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmCharacters", filmId)
	ret0, _ := ret[0].([]models.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmCharacters indicates an expected call of GetFilmCharacters.
func (mr *MockICrewRepoMockRecorder) GetFilmCharacters(filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmCharacters", reflect.TypeOf((*MockICrewRepo)(nil).GetFilmCharacters), filmId)
}

// GetFilmDirectors mocks base method.
func (m *MockICrewRepo) GetFilmDirectors(filmId uint64) ([]models.CrewItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmDirectors", filmId)
	ret0, _ := ret[0].([]models.CrewItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmDirectors indicates an expected call of GetFilmDirectors.
func (mr *MockICrewRepoMockRecorder) GetFilmDirectors(filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmDirectors", reflect.TypeOf((*MockICrewRepo)(nil).GetFilmDirectors), filmId)
}

// GetFilmScenarists mocks base method.
func (m *MockICrewRepo) GetFilmScenarists(filmId uint64) ([]models.CrewItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmScenarists", filmId)
	ret0, _ := ret[0].([]models.CrewItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmScenarists indicates an expected call of GetFilmScenarists.
func (mr *MockICrewRepoMockRecorder) GetFilmScenarists(filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmScenarists", reflect.TypeOf((*MockICrewRepo)(nil).GetFilmScenarists), filmId)
}

// RemoveFavoriteActor mocks base method.
func (m *MockICrewRepo) RemoveFavoriteActor(userId, actorId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFavoriteActor", userId, actorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFavoriteActor indicates an expected call of RemoveFavoriteActor.
func (mr *MockICrewRepoMockRecorder) RemoveFavoriteActor(userId, actorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFavoriteActor", reflect.TypeOf((*MockICrewRepo)(nil).RemoveFavoriteActor), userId, actorId)
}
