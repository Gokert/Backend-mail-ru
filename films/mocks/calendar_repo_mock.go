// Code generated by MockGen. DO NOT EDIT.
// Source: calendar.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_2_Vkladyshi/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockICalendarRepo is a mock of ICalendarRepo interface.
type MockICalendarRepo struct {
	ctrl     *gomock.Controller
	recorder *MockICalendarRepoMockRecorder
}

// MockICalendarRepoMockRecorder is the mock recorder for MockICalendarRepo.
type MockICalendarRepoMockRecorder struct {
	mock *MockICalendarRepo
}

// NewMockICalendarRepo creates a new mock instance.
func NewMockICalendarRepo(ctrl *gomock.Controller) *MockICalendarRepo {
	mock := &MockICalendarRepo{ctrl: ctrl}
	mock.recorder = &MockICalendarRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICalendarRepo) EXPECT() *MockICalendarRepoMockRecorder {
	return m.recorder
}

// GetCalendar mocks base method.
func (m *MockICalendarRepo) GetCalendar() ([]models.DayItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCalendar")
	ret0, _ := ret[0].([]models.DayItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCalendar indicates an expected call of GetCalendar.
func (mr *MockICalendarRepoMockRecorder) GetCalendar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCalendar", reflect.TypeOf((*MockICalendarRepo)(nil).GetCalendar))
}
