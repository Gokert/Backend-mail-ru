// Code generated by MockGen. DO NOT EDIT.
// Source: repo_comment.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_2_Vkladyshi/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockICommentRepo is a mock of ICommentRepo interface.
type MockICommentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockICommentRepoMockRecorder
}

// MockICommentRepoMockRecorder is the mock recorder for MockICommentRepo.
type MockICommentRepoMockRecorder struct {
	mock *MockICommentRepo
}

// NewMockICommentRepo creates a new mock instance.
func NewMockICommentRepo(ctrl *gomock.Controller) *MockICommentRepo {
	mock := &MockICommentRepo{ctrl: ctrl}
	mock.recorder = &MockICommentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommentRepo) EXPECT() *MockICommentRepoMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockICommentRepo) AddComment(filmId, userId uint64, rating uint16, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", filmId, userId, rating, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddComment indicates an expected call of AddComment.
func (mr *MockICommentRepoMockRecorder) AddComment(filmId, userId, rating, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockICommentRepo)(nil).AddComment), filmId, userId, rating, text)
}

// DeleteComment mocks base method.
func (m *MockICommentRepo) DeleteComment(idUser, idFilm uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", idUser, idFilm)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockICommentRepoMockRecorder) DeleteComment(idUser, idFilm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockICommentRepo)(nil).DeleteComment), idUser, idFilm)
}

// GetFilmComments mocks base method.
func (m *MockICommentRepo) GetFilmComments(filmId, first, limit uint64) ([]models.CommentItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmComments", filmId, first, limit)
	ret0, _ := ret[0].([]models.CommentItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmComments indicates an expected call of GetFilmComments.
func (mr *MockICommentRepoMockRecorder) GetFilmComments(filmId, first, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmComments", reflect.TypeOf((*MockICommentRepo)(nil).GetFilmComments), filmId, first, limit)
}

// HasUsersComment mocks base method.
func (m *MockICommentRepo) HasUsersComment(userId, filmId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUsersComment", userId, filmId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasUsersComment indicates an expected call of HasUsersComment.
func (mr *MockICommentRepoMockRecorder) HasUsersComment(userId, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUsersComment", reflect.TypeOf((*MockICommentRepo)(nil).HasUsersComment), userId, filmId)
}
